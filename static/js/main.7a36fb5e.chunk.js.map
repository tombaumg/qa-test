{"version":3,"sources":["Calculator.jsx","App.js","serviceWorker.js","index.js"],"names":["Calculator","useState","res","setRes","first","setFirst","second","setSecond","action","setAction","preview","setPreview","save","setSave","handleNumClicked","number","newNum","Number","handleResClicked","useCallback","console","log","useEffect","includes","className","onClick","colSpan","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7a36fb5e.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport \"./Calculator.css\";\nimport \"./index.css\";\n\nconst Calculator = () => {\n  const [res, setRes] = useState(null);\n  const [first, setFirst] = useState(null);\n  const [second, setSecond] = useState(null);\n  const [action, setAction] = useState(\"\");\n  const [preview, setPreview] = useState(0);\n  const [save, setSave] = useState(null);\n\n  const handleNumClicked = (number) => {\n    if (action) {\n      const newNum = `${second || \"\"}${number}`;\n      setSecond(Number(newNum));\n      setPreview(newNum);\n    } else {\n      const newNum = `${first || \"\"}${number}`;\n      setFirst(Number(newNum));\n      setPreview(newNum);\n    }\n  };\n\n  const handleResClicked = useCallback(() => {\n\t\tsetFirst(null)\n\t\tsetSecond(null)\n    switch (action) {\n      case \"+\": {\n        setRes(first + second);\n        break;\n      }\n      case \"-\": {\n        setRes(first - second);\n        break;\n      }\n      case \"x\": {\n        setRes(first * second);\n        break;\n      }\n      case \"รท\": {\n        setRes(first / second);\n        break;\n      }\n      case \"m+\": {\n        setSave(res);\n        break;\n      }\n      case \"mc\":\n      case \"m-\": {\n        setSave(null);\n        break;\n      }\n      case \"mr\": {\n        first ? setSecond(save) : setFirst(save);\n        setPreview(save);\n        break;\n      }\n      case \"c\": {\n        setRes(null);\n        setPreview(0);\n        setFirst(null);\n        setSecond(null);\n        break;\n      }\n      case \"ac\": {\n        setRes(null);\n        setPreview(-0.000000001);\n        setFirst(null);\n        setSecond(null);\n        break;\n      }\n      default:\n        if (!first || !second) {\n          setRes(first || second);\n          setFirst(null);\n          setSecond(null);\n        }\n\t\t}\n  }, [\n    setRes,\n    setPreview,\n    setFirst,\n    setSecond,\n    action,\n    first,\n    second,\n    res,\n    save,\n\t]);\n\t\n\tconsole.log(first, second)\n\n  useEffect(() => {\n    res ? setPreview(res) : setPreview(0);\n  }, [res]);\n\n  useEffect(() => {\n    action && res && setFirst(res);\n  }, [action, res]);\n\n  useEffect(() => {\n    if ([\"c\", \"ac\", \"m+\", \"m-\", \"mc\", \"mr\"].includes(action)) {\n      handleResClicked();\n      setAction(\"\");\n    }\n  }, [action, handleResClicked]);\n\n  return (\n    <div className=\"container\">\n      <table>\n        <tbody>\n          <tr>\n            <td onClick={setAction} colSpan=\"4\" className=\"sum\">\n              <div className=\"memory\">{save ? `M: ${save}` : \"\"}</div>\n              {preview}\n              <span className=\"action-preview\">{action}</span>\n            </td>\n          </tr>\n          <tr>\n            <td onClick={() => setAction(\"mr\")}>MR</td>\n            <td onClick={() => setAction(\"mc\")}>MC</td>\n            <td onClick={() => setAction(\"m+\")}>M+</td>\n            <td onClick={() => setAction(\"m-\")}>M-</td>\n          </tr>\n          <tr>\n            <td onClick={() => setAction(\"ac\")}>AC</td>\n            <td onClick={() => setAction(\"c\")} className=\"c\">\n              C\n            </td>\n            <td onClick={() => handleNumClicked(7)}>-/+</td>\n            <td onClick={() => handleNumClicked(\"รท\")}>รท</td>\n          </tr>\n          <tr>\n            <td onClick={() => handleNumClicked(7)}>7</td>\n            <td onClick={() => handleNumClicked(8)}>8</td>\n            <td onClick={() => handleNumClicked(9)}>9</td>\n            <td onClick={() => setAction(\"x\")}>x</td>\n          </tr>\n          <tr>\n            <td onClick={() => handleNumClicked(4)}>4</td>\n            <td onClick={() => handleNumClicked(5)}>5</td>\n            <td onClick={() => handleNumClicked(6)}>6</td>\n            <td onClick={() => setAction(\"-\")}>-</td>\n          </tr>\n          <tr>\n            <td onClick={() => handleNumClicked(1)}>1</td>\n            <td onClick={() => handleNumClicked(2)}>2</td>\n            <td onClick={() => handleNumClicked(3)}>3</td>\n            <td onClick={() => setAction(\"+\")}>+</td>\n          </tr>\n          <tr>\n            <td onClick={() => handleNumClicked(0)}>0</td>\n            <td onClick={() => setAction(7)}>.</td>\n            <td onClick={() => handleResClicked()} colSpan=\"2\" className=\"eq\">\n              =\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Calculator;\n","import React from 'react';\nimport Calculator from './Calculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}